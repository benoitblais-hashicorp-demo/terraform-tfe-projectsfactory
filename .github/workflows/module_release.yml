# This workflow runs after `Tag version` or on `release` `published`.
#
# `Publish module version` runs command-line to make API to publish a new version of the module.
# Documentation
# - https://developer.hashicorp.com/terraform/cloud-docs/api-docs/private-registry/modules#create-a-module-version

name: Publish module version

on:  # yamllint disable-line rule:truthy
  release:
    types: [published]
  workflow_run:
    workflows: ["Tag version"]
    types:
      - completed

jobs:
  tag:
    name: Publish module version
    runs-on: ubuntu-latest
    env:
      TFC_ORGANIZATION: "benoitblais-hashicorp"
      TFC_API_TOKEN: ${{ secrets.TFE_TOKEN }}
    steps:

      - name: Publish module version
        env:
          EVENT_CONTEXT: ${{ toJson(github.event) }}
        run: |
          echo "INFO     | Build required variables."
          tfc_api_url="https://app.terraform.io/api/v2"
          auth_header="Authorization: Bearer ${TFC_API_TOKEN}"
          content_header="Content-Type: application/vnd.api+json"
          echo "INFO     | Get release version."
          if [[ "${{ github.event_name }}" == "workflow_run" ]]; then
            version=$(echo "${EVENT_CONTEXT}" | jq ".workflow_run.head_branch" | sed 's|\"||g')
          elif [[ "${{ github.event_name }}" == "release" ]]; then
            version="${{ github.ref_name }}"
          else
            echo "ERROR    | Event name is not \"workflow_run\" or \"release\"."
            exit 1
          fi
          version="${version//v/}"
          commit_sha="${{ github.sha }}"
          echo "INFO     | Version: ${version}"
          echo "INFO     | SHA: ${commit_sha}"
          echo "INFO     | Build JSON payload."
          json_string='{"data": {"type": "registry-module-versions","attributes": {"version": "'"${version}"'","commit_sha": "'"${commit_sha}"'"} } }'
          json_payload=$(echo "${json_string}" | jq)
          echo "INFO     | Get Terraform module provider and name."
          repository_name=$(echo "${EVENT_CONTEXT}" | jq ".repository.name" | sed 's|\"||g')
          echo "INFO     | GitHub repository name: ${repository_name}"
          repository_name_array=$(echo "${repository_name}" | tr "-" " ")
          read -r -a array <<< "${repository_name_array}"
          module_provider="${array[1]}"
          echo "INFO     | Module provider: ${module_provider}"
          module_name=$(echo "${repository_name}" | sed -n -e "s/^.*-${module_provider}-//p" )
          echo "INFO     | Module name: ${module_name}"
          echo "INFO     | Run API call to publish a new version."
          {
            run=$(curl -sS --request POST --url "${tfc_api_url}/organizations/${TFC_ORGANIZATION}/registry-modules/private/${TFC_ORGANIZATION}/${module_name}/${module_provider}/versions" \
            --header "${auth_header}" --header "${content_header}" --data "${json_payload}")
            if ! [[ "${run}" =~ "{\"data\":" ]]; then
              echo "ERROR    | Unable to published new module version."
              echo "${run}"
              exit 1
            fi
          } ||
          {
            echo "ERROR    | Unable to published new module version."
            exit 1
          }
          echo "INFO     | Get module information."
          {
            run=$(curl -sS --request GET --url "${tfc_api_url}/organizations/${TFC_ORGANIZATION}/registry-modules/private/${TFC_ORGANIZATION}/${module_name}/${module_provider}" \
            --header "${auth_header}" --header "${content_header}")
            if ! [[ "${run}" =~ "{\"data\":" ]]; then
              echo "ERROR    | Unable to to get module information."
              echo "${run}"
              exit 1
            fi
          } ||
          {
            echo "ERROR    | Unable to to get module information."
            exit 1
          }
          no_code_id=$(echo "${run}" | jq -r '.data.relationships."no-code-modules".data[].id')
          if [[ "${no_code_id}" != "null" ]]; then
            echo "INFO     | No-code module ID: ${no_code_id}"
            module_id=$(echo "${run}" | jq -r '.data.id')
            echo "INFO     | Module ID: ${module_id}"
            json_string='{"data":{"type":"no-code-modules","attributes":{"enabled":true,"version-pin":"'"${version}"'"},"relationships":{"registry-module":{"data":{"id":"'"${module_id}"'","type":"registry-module"}}}}}'
            json_payload=$(echo "${json_string}" | jq)
            {
              run=$(curl -sS --request PATCH --url "${tfc_api_url}/no-code-modules/${no_code_id}" \
              --header "${auth_header}" --header "${content_header}" --data "${json_payload}")
              if ! [[ "${run}" =~ "{\"data\":" ]]; then
                echo "ERROR    | Unable to update no-code module."
                echo "${run}"
                #exit 1
              fi
            } ||
            {
              echo "ERROR    | Unable to update no-code module."
              exit 1
            }
          else
            echo "INFO     | Module is not a no-code module. Nothing to do."
          fi
